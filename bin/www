#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Social_Network_App:server');
var http = require('http');
var dbConn = require("../Dbactions/dbConnector").DbConnector;
var db = new dbConn();
var nodeCleanup = require('node-cleanup');

 
nodeCleanup(function (exitCode, signal) {
    if (signal) {
        db.closeDb(function done() {
            // calling process.exit() won't inform parent process of signal 
            process.kill(process.pid, signal);
        });
        nodeCleanup.uninstall(); // don't call cleanup handler again 
        return false;
    }
});

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("Listening on port ************:" +port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}

io.on('connection', function(socket) {
    console.log('new connection made');

    socket.on('join',function(data){
      socket.name = data.name;
      console.log("joined **********" +data);
      function cb(rows){
      io.emit('loggedin-users', rows);
      }
      db.updatesocketid(socket.name,socket.id,cb);
    });

    socket.on('disconnect', function() {
      socket.id = 0;
      function cb(rows){
      io.emit('loggedin-users', rows);
      }
    db.updatesocketid(socket.name,socket.id,cb);
   
  });

    socket.on('message-sent', function(data){
      console.log("server side message-received")
      socket.broadcast.to(data.user.socketid).emit('message-received',data);
    });

});

